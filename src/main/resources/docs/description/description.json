[ {
  "patternId" : "AbbreviationAsWordInName",
  "title" : "AbbreviationAsWordInName",
  "parameters" : [ {
    "name" : "allowedAbbreviationLength",
    "description" : "Indicate the number of consecutive capital letters allowed in targeted\n             identifiers (abbreviations in the classes, interfaces, variables and methods\n             names, ... )."
  }, {
    "name" : "allowedAbbreviations",
    "description" : "Specify list of abbreviations that must be skipped for checking.\n            Abbreviations should be separated by comma."
  }, {
    "name" : "ignoreFinal",
    "description" : "Allow to skip variables with final modifier."
  }, {
    "name" : "ignoreOverriddenMethods",
    "description" : "Allow to ignore methods tagged with @Override annotation\n            (that usually mean inherited name)."
  }, {
    "name" : "ignoreStatic",
    "description" : "Allow to skip variables with static modifier."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "AbstractClassName",
  "title" : "AbstractClassName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specify valid identifiers."
  }, {
    "name" : "ignoreModifier",
    "description" : "\n              Control whether to ignore checking for the\n              abstract modifier on classes that match the\n              name.\n            "
  }, {
    "name" : "ignoreName",
    "description" : "\n              Control whether to ignore checking the name. Realistically\n              only useful if using the check to identify that match name\n              and do not have the abstract modifier.\n            "
  } ]
}, {
  "patternId" : "AnnotationLocation",
  "title" : "AnnotationLocation",
  "parameters" : [ {
    "name" : "allowSamelineMultipleAnnotations",
    "description" : "Allow annotation(s) to be located on the same line as target element."
  }, {
    "name" : "allowSamelineParameterizedAnnotation",
    "description" : "Allow one and only parameterized annotation to be located on the same line as\n                target element."
  }, {
    "name" : "allowSamelineSingleParameterlessAnnotation",
    "description" : "Allow single parameterless annotation to be located on the same line as\n                target element."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "AnnotationOnSameLine",
  "title" : "AnnotationOnSameLine",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "AnnotationUseStyle",
  "title" : "AnnotationUseStyle",
  "parameters" : [ {
    "name" : "closingParens",
    "description" : "\n              Define the policy for ending parenthesis.\n            "
  }, {
    "name" : "elementStyle",
    "description" : "\n              Define the annotation element styles.\n            "
  }, {
    "name" : "trailingArrayComma",
    "description" : "\n              Define the policy for trailing comma in arrays.\n            "
  } ]
}, {
  "patternId" : "AnonInnerLength",
  "title" : "AnonInnerLength",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify the maximum number of lines allowed."
  } ]
}, {
  "patternId" : "ArrayTrailingComma",
  "title" : "ArrayTrailingComma"
}, {
  "patternId" : "ArrayTypeStyle",
  "title" : "ArrayTypeStyle",
  "parameters" : [ {
    "name" : "javaStyle",
    "description" : "\n              Control whether to enforce Java style (true) or C style (false).\n            "
  } ]
}, {
  "patternId" : "AtclauseOrder",
  "title" : "AtclauseOrder",
  "parameters" : [ {
    "name" : "tagOrder",
    "description" : "Specify the order by tags."
  }, {
    "name" : "target",
    "description" : "Specify the list of targets to check at-clauses."
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "AvoidEscapedUnicodeCharacters",
  "title" : "AvoidEscapedUnicodeCharacters",
  "parameters" : [ {
    "name" : "allowByTailComment",
    "description" : "Allow use escapes if trail comment is present."
  }, {
    "name" : "allowEscapesForControlCharacters",
    "description" : "Allow use escapes for non-printable, control characters."
  }, {
    "name" : "allowIfAllCharactersEscaped",
    "description" : "Allow if all characters in literal are escaped."
  }, {
    "name" : "allowNonPrintableEscapes",
    "description" : "Allow use escapes for non-printable, whitespace characters."
  } ]
}, {
  "patternId" : "AvoidInlineConditionals",
  "title" : "AvoidInlineConditionals"
}, {
  "patternId" : "AvoidNestedBlocks",
  "title" : "AvoidNestedBlocks",
  "parameters" : [ {
    "name" : "allowInSwitchCase",
    "description" : "Allow nested blocks if they are the only child of a switch case."
  } ]
}, {
  "patternId" : "AvoidStarImport",
  "title" : "AvoidStarImport",
  "parameters" : [ {
    "name" : "allowClassImports",
    "description" : "\n              whether to allow starred class imports like\n              import java.util.*;.\n            "
  }, {
    "name" : "allowStaticMemberImports",
    "description" : "\n              whether to allow starred static member imports like\n              import static org.junit.Assert.*;\n            "
  }, {
    "name" : "excludes",
    "description" : "\n              packages where star imports are allowed. Note that this property\n              is not recursive, subpackages of excluded packages are not\n              automatically excluded.\n            "
  } ]
}, {
  "patternId" : "AvoidStaticImport",
  "title" : "AvoidStaticImport",
  "parameters" : [ {
    "name" : "excludes",
    "description" : "excludes"
  } ]
}, {
  "patternId" : "BooleanExpressionComplexity",
  "title" : "BooleanExpressionComplexity",
  "parameters" : [ {
    "name" : "max",
    "description" : "\n              the maximum allowed number of boolean operations in one\n              expression.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "CatchParameterName",
  "title" : "CatchParameterName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "ClassDataAbstractionCoupling",
  "title" : "ClassDataAbstractionCoupling",
  "parameters" : [ {
    "name" : "excludeClassesRegexps",
    "description" : "User-configured regular expressions to ignore classes"
  }, {
    "name" : "excludedClasses",
    "description" : "User-configured class names to ignore"
  }, {
    "name" : "excludedPackages",
    "description" : "User-configured packages to ignore"
  }, {
    "name" : "max",
    "description" : "the maximum threshold allowed"
  } ]
}, {
  "patternId" : "ClassFanOutComplexity",
  "title" : "ClassFanOutComplexity",
  "parameters" : [ {
    "name" : "excludeClassesRegexps",
    "description" : "User-configured regular expressions to ignore classes"
  }, {
    "name" : "excludedClasses",
    "description" : "User-configured class names to ignore"
  }, {
    "name" : "excludedPackages",
    "description" : "User-configured packages to ignore"
  }, {
    "name" : "max",
    "description" : "the maximum threshold allowed"
  } ]
}, {
  "patternId" : "ClassMemberImpliedModifier",
  "title" : "ClassMemberImpliedModifier",
  "parameters" : [ {
    "name" : "violateImpliedStaticOnNestedEnum",
    "description" : "\n              Control whether to enforce that static is explicitly coded\n              on nested enums in classes."
  }, {
    "name" : "violateImpliedStaticOnNestedInterface",
    "description" : "\n              Control whether to enforce that static is explicitly coded\n              on nested interfaces in classes."
  } ]
}, {
  "patternId" : "ClassTypeParameterName",
  "title" : "ClassTypeParameterName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "CommentsIndentation",
  "title" : "CommentsIndentation",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "ConstantName",
  "title" : "ConstantName",
  "parameters" : [ {
    "name" : "applyToPackage",
    "description" : "\n              Controls whether to apply the check to package-private member.\n            "
  }, {
    "name" : "applyToPrivate",
    "description" : "Controls whether to apply the check to private member."
  }, {
    "name" : "applyToProtected",
    "description" : "Controls whether to apply the check to protected member."
  }, {
    "name" : "applyToPublic",
    "description" : "Controls whether to apply the check to public member."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "CovariantEquals",
  "title" : "CovariantEquals"
}, {
  "patternId" : "CustomImportOrder",
  "title" : "CustomImportOrder",
  "parameters" : [ {
    "name" : "customImportOrderRules",
    "description" : "Specify list of order declaration customizing by user."
  }, {
    "name" : "separateLineBetweenGroups",
    "description" : "Force empty line separator between import groups."
  }, {
    "name" : "sortImportsInGroupAlphabetically",
    "description" : "Force grouping alphabetically, in\n                \n                   ASCII sort order."
  }, {
    "name" : "specialImportsRegExp",
    "description" : "Specify RegExp for SPECIAL_IMPORTS group imports."
  }, {
    "name" : "standardPackageRegExp",
    "description" : "Specify RegExp for STANDARD_JAVA_PACKAGE group imports."
  }, {
    "name" : "thirdPartyPackageRegExp",
    "description" : "Specify RegExp for THIRD_PARTY_PACKAGE group imports."
  } ]
}, {
  "patternId" : "CyclomaticComplexity",
  "title" : "CyclomaticComplexity",
  "parameters" : [ {
    "name" : "max",
    "description" : "the maximum threshold allowed"
  }, {
    "name" : "switchBlockAsSingleDecisionPoint",
    "description" : "whether to treat the whole switch block as a single decision point"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "DeclarationOrder",
  "title" : "DeclarationOrder",
  "parameters" : [ {
    "name" : "ignoreConstructors",
    "description" : "control whether to ignore constructors."
  }, {
    "name" : "ignoreModifiers",
    "description" : "control whether to ignore modifiers (fields, ...)."
  } ]
}, {
  "patternId" : "DefaultComesLast",
  "title" : "DefaultComesLast",
  "parameters" : [ {
    "name" : "skipIfLastAndSharedWithCase",
    "description" : "\n              Control whether to allow default along with\n              case if they are not last.\n            "
  } ]
}, {
  "patternId" : "DescendantToken",
  "title" : "DescendantToken",
  "parameters" : [ {
    "name" : "limitedTokens",
    "description" : "Specify set of tokens with limited occurrences as descendants."
  }, {
    "name" : "maximumDepth",
    "description" : "Specify the maximum depth for descendant counts."
  }, {
    "name" : "maximumMessage",
    "description" : "Define the violation message when the maximum count is exceeded."
  }, {
    "name" : "maximumNumber",
    "description" : "Specify a maximum count for descendants."
  }, {
    "name" : "minimumDepth",
    "description" : "Specify the minimum depth for descendant counts."
  }, {
    "name" : "minimumMessage",
    "description" : "Define the violation message when the minimum count is not reached."
  }, {
    "name" : "minimumNumber",
    "description" : "Specify a minimum count for descendants."
  }, {
    "name" : "sumTokenCounts",
    "description" : "\n              Control whether the number of tokens found should be calculated\n              from the sum of the individual token counts.\n            "
  } ]
}, {
  "patternId" : "DesignForExtension",
  "title" : "DesignForExtension",
  "parameters" : [ {
    "name" : "ignoredAnnotations",
    "description" : "\n                      Specify annotations which allow the check to skip the method from validation.\n                    "
  } ]
}, {
  "patternId" : "EmptyBlock",
  "title" : "EmptyBlock",
  "parameters" : [ {
    "name" : "option",
    "description" : "specify the policy on block contents."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "EmptyCatchBlock",
  "title" : "EmptyCatchBlock",
  "parameters" : [ {
    "name" : "commentFormat",
    "description" : "commentFormat"
  }, {
    "name" : "exceptionVariableName",
    "description" : "\n              Specify the RegExp for the name of the variable associated with exception.\n              If check meets variable name matching specified value - empty block is suppressed.\n            "
  } ]
}, {
  "patternId" : "EmptyForInitializerPad",
  "title" : "EmptyForInitializerPad",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to pad an empty for iterator."
  } ]
}, {
  "patternId" : "EmptyForIteratorPad",
  "title" : "EmptyForIteratorPad",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to pad an empty for iterator."
  } ]
}, {
  "patternId" : "EmptyLineSeparator",
  "title" : "EmptyLineSeparator",
  "parameters" : [ {
    "name" : "allowMultipleEmptyLines",
    "description" : "Allow multiple empty lines between class members."
  }, {
    "name" : "allowMultipleEmptyLinesInsideClassMembers",
    "description" : "Allow multiple empty lines inside class members."
  }, {
    "name" : "allowNoEmptyLineBetweenFields",
    "description" : "Allow no empty line between fields."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "EmptyStatement",
  "title" : "EmptyStatement"
}, {
  "patternId" : "EqualsAvoidNull",
  "title" : "EqualsAvoidNull",
  "parameters" : [ {
    "name" : "ignoreEqualsIgnoreCase",
    "description" : "\n              Control whether to ignore String.equalsIgnoreCase(String) invocations.\n            "
  } ]
}, {
  "patternId" : "EqualsHashCode",
  "title" : "EqualsHashCode"
}, {
  "patternId" : "ExecutableStatementCount",
  "title" : "ExecutableStatementCount",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify the maximum threshold allowed."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "ExplicitInitialization",
  "title" : "ExplicitInitialization",
  "parameters" : [ {
    "name" : "onlyObjectReferences",
    "description" : "control whether only explicit initializations made to\n                null for objects should be checked."
  } ]
}, {
  "patternId" : "FallThrough",
  "title" : "FallThrough",
  "parameters" : [ {
    "name" : "checkLastCaseGroup",
    "description" : "\n              Control whether the last case group must be checked.\n            "
  }, {
    "name" : "reliefPattern",
    "description" : "\n              Define the RegExp to match the relief comment that suppresses\n              the warning about a fall through.\n            "
  } ]
}, {
  "patternId" : "FileLength",
  "title" : "FileLength",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "Specify the file type extension of files to process."
  }, {
    "name" : "max",
    "description" : "Specify the maximum number of lines allowed."
  } ]
}, {
  "patternId" : "FileTabCharacter",
  "title" : "FileTabCharacter",
  "parameters" : [ {
    "name" : "eachLine",
    "description" : "\n              Control whether to report on each line containing a tab, or just the first instance.\n            "
  }, {
    "name" : "fileExtensions",
    "description" : "Specify file type extension of files to process."
  } ]
}, {
  "patternId" : "FinalClass",
  "title" : "FinalClass"
}, {
  "patternId" : "FinalLocalVariable",
  "title" : "FinalLocalVariable",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  }, {
    "name" : "validateEnhancedForLoopVariable",
    "description" : "\n              Control whether to check\n              \n              enhanced for-loop variable."
  } ]
}, {
  "patternId" : "FinalParameters",
  "title" : "FinalParameters",
  "parameters" : [ {
    "name" : "ignorePrimitiveTypes",
    "description" : "Ignore primitive types as parameters."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "GenericWhitespace",
  "title" : "GenericWhitespace"
}, {
  "patternId" : "Header",
  "title" : "Header",
  "parameters" : [ {
    "name" : "charset",
    "description" : "character encoding to use when reading the headerFile"
  }, {
    "name" : "fileExtensions",
    "description" : "file type extension of files to process"
  }, {
    "name" : "header",
    "description" : "\n              the required header specified inline. Individual header lines\n              must be separated by the string \"\\n\" (even on platforms with a\n              different line separator), see examples below.\n            "
  }, {
    "name" : "headerFile",
    "description" : "name of the file containing the required header"
  }, {
    "name" : "ignoreLines",
    "description" : "line numbers to ignore"
  } ]
}, {
  "patternId" : "HiddenField",
  "title" : "HiddenField",
  "parameters" : [ {
    "name" : "ignoreAbstractMethods",
    "description" : "Control whether to ignore parameters of abstract methods."
  }, {
    "name" : "ignoreConstructorParameter",
    "description" : "Control whether to ignore constructor parameters."
  }, {
    "name" : "ignoreFormat",
    "description" : "Define the RegExp for names of variables and parameters to ignore."
  }, {
    "name" : "ignoreSetter",
    "description" : "\n              Allow to ignore the parameter of a property setter method.\n            "
  }, {
    "name" : "setterCanReturnItsClass",
    "description" : "\n              Allow to expand the definition of a setter method\n              to include methods that return the class' instance.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "HideUtilityClassConstructor",
  "title" : "HideUtilityClassConstructor"
}, {
  "patternId" : "IllegalCatch",
  "title" : "IllegalCatch",
  "parameters" : [ {
    "name" : "illegalClassNames",
    "description" : "Specify exception class names to reject."
  } ]
}, {
  "patternId" : "IllegalImport",
  "title" : "IllegalImport",
  "parameters" : [ {
    "name" : "illegalClasses",
    "description" : "illegalClasses"
  }, {
    "name" : "illegalPkgs",
    "description" : "illegalPkgs"
  }, {
    "name" : "regexp",
    "description" : "Whether the illegalPkgs and illegalClasses should be interpreted as\n                regular expressions"
  } ]
}, {
  "patternId" : "IllegalInstantiation",
  "title" : "IllegalInstantiation",
  "parameters" : [ {
    "name" : "classes",
    "description" : "Specify fully qualified class names that should not be instantiated."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "IllegalThrows",
  "title" : "IllegalThrows",
  "parameters" : [ {
    "name" : "ignoreOverriddenMethods",
    "description" : "\n              allow to ignore checking overridden methods (marked with Override\n              or java.lang.Override annotation).\n            "
  }, {
    "name" : "ignoredMethodNames",
    "description" : "Specify names of methods to ignore."
  }, {
    "name" : "illegalClassNames",
    "description" : "Specify throw class names to reject."
  } ]
}, {
  "patternId" : "IllegalToken",
  "title" : "IllegalToken",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "IllegalTokenText",
  "title" : "IllegalTokenText",
  "parameters" : [ {
    "name" : "format",
    "description" : "Define the RegExp for illegal pattern."
  }, {
    "name" : "ignoreCase",
    "description" : "Control whether to ignore case when matching."
  }, {
    "name" : "message",
    "description" : "Define the message which is used to notify about violations;\n            if empty then the default message is used."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "IllegalType",
  "title" : "IllegalType",
  "parameters" : [ {
    "name" : "ignoredMethodNames",
    "description" : "Specify methods that should not be checked."
  }, {
    "name" : "illegalAbstractClassNameFormat",
    "description" : "Specify RegExp for illegal abstract class names."
  }, {
    "name" : "illegalClassNames",
    "description" : "Specify classes that should not be used as types in variable\n            declarations, return values or parameters."
  }, {
    "name" : "legalAbstractClassNames",
    "description" : "Define abstract classes that may be used as types. "
  }, {
    "name" : "memberModifiers",
    "description" : "\n              Control whether to check only methods and fields with any of the specified modifiers.\n              This property does not affect method calls nor method references.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  }, {
    "name" : "validateAbstractClassNames",
    "description" : "Control whether to validate abstract class names."
  } ]
}, {
  "patternId" : "ImportControl",
  "title" : "ImportControl",
  "parameters" : [ {
    "name" : "file",
    "description" : "file"
  }, {
    "name" : "path",
    "description" : "\n              Regular expression of file paths to which this check should apply. Files that\n              don't match the pattern will not be checked. The pattern will be matched against\n              the full absolute file path.\n            "
  } ]
}, {
  "patternId" : "ImportOrder",
  "title" : "ImportOrder",
  "parameters" : [ {
    "name" : "caseSensitive",
    "description" : "control whether string comparison should be case sensitive or not.\n              Case sensitive sorting is in\n              ASCII sort order.\n              It affects both type imports and static imports.\n            "
  }, {
    "name" : "groups",
    "description" : "groups"
  }, {
    "name" : "option",
    "description" : "specify policy on the relative order between type imports and static imports."
  }, {
    "name" : "ordered",
    "description" : "control whether type imports within each group should be sorted.\n              It doesn't affect sorting for static imports."
  }, {
    "name" : "separated",
    "description" : "\n              control whether type import groups should be separated by, at least, one\n              blank line or comment and aren't separated internally.\n              It doesn't affect separations for static imports.\n            "
  }, {
    "name" : "separatedStaticGroups",
    "description" : "separatedStaticGroups"
  }, {
    "name" : "sortStaticImportsAlphabetically",
    "description" : "\n                control whether static imports located at top or\n                bottom are sorted within the group.\n            "
  }, {
    "name" : "staticGroups",
    "description" : "staticGroups"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  }, {
    "name" : "useContainerOrderingForStatic",
    "description" : "\n                control whether to use container ordering (Eclipse IDE term) for static\n                imports or not."
  } ]
}, {
  "patternId" : "Indentation",
  "title" : "Indentation",
  "parameters" : [ {
    "name" : "arrayInitIndent",
    "description" : "Specify how far an array initialisation should be indented when on next line."
  }, {
    "name" : "basicOffset",
    "description" : "\n              Specify how far new indentation level should be indented when on the next line.\n            "
  }, {
    "name" : "braceAdjustment",
    "description" : "Specify how far a braces should be indented when on the next line."
  }, {
    "name" : "caseIndent",
    "description" : "Specify how far a case label should be indented when on next line."
  }, {
    "name" : "forceStrictCondition",
    "description" : "forceStrictCondition"
  }, {
    "name" : "lineWrappingIndentation",
    "description" : "\n              Specify how far continuation line should be indented when line-wrapping is present.\n            "
  }, {
    "name" : "throwsIndent",
    "description" : "Specify how far a throws clause should be indented when on next line."
  } ]
}, {
  "patternId" : "InnerAssignment",
  "title" : "InnerAssignment"
}, {
  "patternId" : "InnerTypeLast",
  "title" : "InnerTypeLast"
}, {
  "patternId" : "InterfaceIsType",
  "title" : "InterfaceIsType",
  "parameters" : [ {
    "name" : "allowMarkerInterfaces",
    "description" : "\n              Control whether marker interfaces like Serializable are\n              allowed.\n            "
  } ]
}, {
  "patternId" : "InterfaceMemberImpliedModifier",
  "title" : "InterfaceMemberImpliedModifier",
  "parameters" : [ {
    "name" : "violateImpliedAbstractMethod",
    "description" : "\n              Control whether to enforce that abstract is explicitly coded\n              on interface methods."
  }, {
    "name" : "violateImpliedFinalField",
    "description" : "\n              Control whether to enforce that final is explicitly coded\n              on interface fields."
  }, {
    "name" : "violateImpliedPublicField",
    "description" : "\n              Control whether to enforce that public is explicitly coded\n              on interface fields."
  }, {
    "name" : "violateImpliedPublicMethod",
    "description" : "\n              Control whether to enforce that public is explicitly coded\n              on interface methods."
  }, {
    "name" : "violateImpliedPublicNested",
    "description" : "\n              Control whether to enforce that public is explicitly coded\n              on interface nested types."
  }, {
    "name" : "violateImpliedStaticField",
    "description" : "\n              Control whether to enforce that static is explicitly coded\n              on interface fields."
  }, {
    "name" : "violateImpliedStaticNested",
    "description" : "\n              Control whether to enforce that static is explicitly coded\n              on interface nested types."
  } ]
}, {
  "patternId" : "InterfaceTypeParameterName",
  "title" : "InterfaceTypeParameterName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "InvalidJavadocPosition",
  "title" : "InvalidJavadocPosition"
}, {
  "patternId" : "JavaNCSS",
  "title" : "JavaNCSS",
  "parameters" : [ {
    "name" : "classMaximum",
    "description" : "\n              the maximum allowed number of non commenting lines in a\n              class.\n            "
  }, {
    "name" : "fileMaximum",
    "description" : "\n              the maximum allowed number of non commenting lines in a\n              file including all top level and nested classes.\n            "
  }, {
    "name" : "methodMaximum",
    "description" : "\n              the maximum allowed number of non commenting lines in a\n              method.\n            "
  } ]
}, {
  "patternId" : "JavadocBlockTagLocation",
  "title" : "JavadocBlockTagLocation",
  "parameters" : [ {
    "name" : "tags",
    "description" : "Specify the javadoc tags to process."
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              Control when to print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "JavadocMethod",
  "title" : "JavadocMethod",
  "parameters" : [ {
    "name" : "allowMissingParamTags",
    "description" : "whether to ignore violations when a method has parameters\n            but does not have matching param tags in the javadoc."
  }, {
    "name" : "allowMissingReturnTag",
    "description" : "whether to ignore violations when a method returns\n            non-void type and does not have a return tag in the javadoc."
  }, {
    "name" : "allowMissingThrowsTags",
    "description" : "whether to ignore violations when a method declares\n            that it throws exceptions but does not have matching throws tags\n            in the javadoc."
  }, {
    "name" : "allowThrowsTagsForSubclasses",
    "description" : "whether to allow documented exceptions that\n            are subclass of one of declared exception."
  }, {
    "name" : "allowUndeclaredRTE",
    "description" : "whether to allow documented exceptions that\n            are not declared if they are a subclass of java.lang.RuntimeException"
  }, {
    "name" : "allowedAnnotations",
    "description" : "List of annotations that allow missed documentation."
  }, {
    "name" : "excludeScope",
    "description" : "visibility scope where Javadoc comments are not checked"
  }, {
    "name" : "logLoadErrors",
    "description" : "logLoadErrors"
  }, {
    "name" : "scope",
    "description" : "visibility scope where Javadoc comments are checked"
  }, {
    "name" : "suppressLoadErrors",
    "description" : "suppressLoadErrors"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  }, {
    "name" : "validateThrows",
    "description" : "Allows validating throws tags."
  } ]
}, {
  "patternId" : "JavadocPackage",
  "title" : "JavadocPackage",
  "parameters" : [ {
    "name" : "allowLegacy",
    "description" : "\n              If set then allow the use of a\n              package.html file.\n            "
  }, {
    "name" : "fileExtensions",
    "description" : "file type extension of files to process"
  } ]
}, {
  "patternId" : "JavadocParagraph",
  "title" : "JavadocParagraph",
  "parameters" : [ {
    "name" : "allowNewlineParagraph",
    "description" : "whether the <p> tag should be placed immediately before the first word"
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "JavadocStyle",
  "title" : "JavadocStyle",
  "parameters" : [ {
    "name" : "checkEmptyJavadoc",
    "description" : "\n              Whether to check if the Javadoc is missing a describing text.\n            "
  }, {
    "name" : "checkFirstSentence",
    "description" : "\n              Whether to check the first sentence for proper end of sentence.\n            "
  }, {
    "name" : "checkHtml",
    "description" : "Whether to check for incomplete HTML tags."
  }, {
    "name" : "endOfSentenceFormat",
    "description" : "\n              Format for matching the end of a sentence.\n            "
  }, {
    "name" : "excludeScope",
    "description" : "visibility scope where Javadoc comments are not checked"
  }, {
    "name" : "scope",
    "description" : "visibility scope where Javadoc comments are checked"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "JavadocTagContinuationIndentation",
  "title" : "JavadocTagContinuationIndentation",
  "parameters" : [ {
    "name" : "offset",
    "description" : "How many spaces to use for new indentation level."
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "JavadocType",
  "title" : "JavadocType",
  "parameters" : [ {
    "name" : "allowMissingParamTags",
    "description" : "whether to ignore violations when a class has type parameters\n                but does not have matching param tags in the javadoc."
  }, {
    "name" : "allowUnknownTags",
    "description" : "whether to ignore violations when a Javadoc tag is not recognised."
  }, {
    "name" : "allowedAnnotations",
    "description" : "\n              List of annotations that allow missed documentation. Only short names are allowed,\n              e.g. Generated.\n            "
  }, {
    "name" : "authorFormat",
    "description" : "pattern for @author tag"
  }, {
    "name" : "excludeScope",
    "description" : "visibility scope where Javadoc comments are not checked"
  }, {
    "name" : "scope",
    "description" : "visibility scope where Javadoc comments are checked"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  }, {
    "name" : "versionFormat",
    "description" : "pattern for @version tag"
  } ]
}, {
  "patternId" : "JavadocVariable",
  "title" : "JavadocVariable",
  "parameters" : [ {
    "name" : "excludeScope",
    "description" : "visibility scope where Javadoc comments are not checked"
  }, {
    "name" : "ignoreNamePattern",
    "description" : "regexp to define variable names to ignore"
  }, {
    "name" : "scope",
    "description" : "visibility scope where Javadoc comments are checked"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "LambdaParameterName",
  "title" : "LambdaParameterName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "LeftCurly",
  "title" : "LeftCurly",
  "parameters" : [ {
    "name" : "ignoreEnums",
    "description" : "Allow to ignore enums when left curly brace policy is EOL."
  }, {
    "name" : "option",
    "description" : "Specify the policy on placement of a left curly brace ('{')."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "LineLength",
  "title" : "LineLength",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "Specify file extensions that are accepted."
  }, {
    "name" : "ignorePattern",
    "description" : "Specify pattern for lines to ignore."
  }, {
    "name" : "max",
    "description" : "Specify the maximum line length allowed."
  } ]
}, {
  "patternId" : "LocalFinalVariableName",
  "title" : "LocalFinalVariableName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "LocalVariableName",
  "title" : "LocalVariableName",
  "parameters" : [ {
    "name" : "allowOneCharVarInForLoop",
    "description" : "allowOneCharVarInForLoop"
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "MagicNumber",
  "title" : "MagicNumber",
  "parameters" : [ {
    "name" : "constantWaiverParentToken",
    "description" : "Specify tokens that are allowed in the AST path from the number literal to the\n                  enclosing constant definition."
  }, {
    "name" : "ignoreAnnotation",
    "description" : "Ignore magic numbers in annotation declarations."
  }, {
    "name" : "ignoreAnnotationElementDefaults",
    "description" : "Ignore magic numbers in annotation elements defaults."
  }, {
    "name" : "ignoreFieldDeclaration",
    "description" : "Ignore magic numbers in field declarations."
  }, {
    "name" : "ignoreHashCodeMethod",
    "description" : "Ignore magic numbers in hashCode methods."
  }, {
    "name" : "ignoreNumbers",
    "description" : "Specify non-magic numbers."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MemberName",
  "title" : "MemberName",
  "parameters" : [ {
    "name" : "applyToPackage",
    "description" : "\n              Controls whether to apply the check to package-private member.\n            "
  }, {
    "name" : "applyToPrivate",
    "description" : "Controls whether to apply the check to private member."
  }, {
    "name" : "applyToProtected",
    "description" : "Controls whether to apply the check to protected member."
  }, {
    "name" : "applyToPublic",
    "description" : "Controls whether to apply the check to public member."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "MethodCount",
  "title" : "MethodCount",
  "parameters" : [ {
    "name" : "maxPackage",
    "description" : "Specify the maximum number of package methods allowed."
  }, {
    "name" : "maxPrivate",
    "description" : "Specify the maximum number of private methods allowed."
  }, {
    "name" : "maxProtected",
    "description" : "Specify the maximum number of protected methods allowed."
  }, {
    "name" : "maxPublic",
    "description" : "Specify the maximum number of public methods allowed."
  }, {
    "name" : "maxTotal",
    "description" : "Specify the maximum number of methods allowed at all scope levels."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MethodLength",
  "title" : "MethodLength",
  "parameters" : [ {
    "name" : "countEmpty",
    "description" : "\n              Control whether to count empty lines and single line comments of the\n              form //.\n            "
  }, {
    "name" : "max",
    "description" : "Specify the maximum number of lines allowed."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MethodName",
  "title" : "MethodName",
  "parameters" : [ {
    "name" : "allowClassName",
    "description" : "allowClassName"
  }, {
    "name" : "applyToPackage",
    "description" : "\n              Controls whether to apply the check to package-private member.\n            "
  }, {
    "name" : "applyToPrivate",
    "description" : "Controls whether to apply the check to private member."
  }, {
    "name" : "applyToProtected",
    "description" : "Controls whether to apply the check to protected member."
  }, {
    "name" : "applyToPublic",
    "description" : "Controls whether to apply the check to public member."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "MethodParamPad",
  "title" : "MethodParamPad",
  "parameters" : [ {
    "name" : "allowLineBreaks",
    "description" : "\n              Allow a line break between the identifier and left parenthesis.\n            "
  }, {
    "name" : "option",
    "description" : "Specify policy on how to pad method parameter."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MethodTypeParameterName",
  "title" : "MethodTypeParameterName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "MissingCtor",
  "title" : "MissingCtor"
}, {
  "patternId" : "MissingDeprecated",
  "title" : "MissingDeprecated",
  "parameters" : [ {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "MissingJavadocMethod",
  "title" : "MissingJavadocMethod",
  "parameters" : [ {
    "name" : "allowMissingPropertyJavadoc",
    "description" : "\n              Control whether to allow missing Javadoc on accessor methods for\n              properties (setters and getters).\n            "
  }, {
    "name" : "allowedAnnotations",
    "description" : "Configure the list of annotations that allow missed documentation."
  }, {
    "name" : "excludeScope",
    "description" : "Specify the visibility scope where Javadoc comments are not checked."
  }, {
    "name" : "ignoreMethodNamesRegex",
    "description" : "ignore method whose names are matching specified regex."
  }, {
    "name" : "minLineCount",
    "description" : "Control the minimal amount of lines in method to allow no documentation."
  }, {
    "name" : "scope",
    "description" : "Specify the visibility scope where Javadoc comments are checked."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MissingJavadocPackage",
  "title" : "MissingJavadocPackage"
}, {
  "patternId" : "MissingJavadocType",
  "title" : "MissingJavadocType",
  "parameters" : [ {
    "name" : "excludeScope",
    "description" : "specify the visibility scope where Javadoc comments are not checked."
  }, {
    "name" : "scope",
    "description" : "specify the visibility scope where Javadoc comments are checked."
  }, {
    "name" : "skipAnnotations",
    "description" : "\n              specify the list of annotations that allow missed documentation.\n              Only short names are allowed, e.g. Generated.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "MissingOverride",
  "title" : "MissingOverride",
  "parameters" : [ {
    "name" : "javaFiveCompatibility",
    "description" : "\n              Enable java 5 compatibility mode.\n            "
  } ]
}, {
  "patternId" : "MissingSwitchDefault",
  "title" : "MissingSwitchDefault"
}, {
  "patternId" : "ModifiedControlVariable",
  "title" : "ModifiedControlVariable",
  "parameters" : [ {
    "name" : "skipEnhancedForLoopVariable",
    "description" : "Control whether to check\n              \n              enhanced for-loop variable."
  } ]
}, {
  "patternId" : "ModifierOrder",
  "title" : "ModifierOrder"
}, {
  "patternId" : "MultipleStringLiterals",
  "title" : "MultipleStringLiterals",
  "parameters" : [ {
    "name" : "allowedDuplicates",
    "description" : "\n              Specify the maximum number of occurrences to allow without generating a\n              warning.\n            "
  }, {
    "name" : "ignoreOccurrenceContext",
    "description" : "ignoreOccurrenceContext"
  }, {
    "name" : "ignoreStringsRegexp",
    "description" : "\n              Specify RegExp for ignored strings (with quotation marks).\n            "
  } ]
}, {
  "patternId" : "MultipleVariableDeclarations",
  "title" : "MultipleVariableDeclarations"
}, {
  "patternId" : "MutableException",
  "title" : "MutableException",
  "parameters" : [ {
    "name" : "extendedClassNameFormat",
    "description" : "Specify pattern for extended class names."
  }, {
    "name" : "format",
    "description" : "Specify pattern for exception class names."
  } ]
}, {
  "patternId" : "NPathComplexity",
  "title" : "NPathComplexity",
  "parameters" : [ {
    "name" : "max",
    "description" : "the maximum threshold allowed"
  } ]
}, {
  "patternId" : "NeedBraces",
  "title" : "NeedBraces",
  "parameters" : [ {
    "name" : "allowEmptyLoopBody",
    "description" : "allow loops with empty bodies."
  }, {
    "name" : "allowSingleLineStatement",
    "description" : "allow single-line statements without braces."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "NestedForDepth",
  "title" : "NestedForDepth",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify maximum allowed nesting depth."
  } ]
}, {
  "patternId" : "NestedIfDepth",
  "title" : "NestedIfDepth",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify maximum allowed nesting depth."
  } ]
}, {
  "patternId" : "NestedTryDepth",
  "title" : "NestedTryDepth",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify maximum allowed nesting depth."
  } ]
}, {
  "patternId" : "NewlineAtEndOfFile",
  "title" : "NewlineAtEndOfFile",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "Specify the file type extension of the files to check."
  }, {
    "name" : "lineSeparator",
    "description" : "Specify the type of line separator."
  } ]
}, {
  "patternId" : "NoClone",
  "title" : "NoClone"
}, {
  "patternId" : "NoFinalizer",
  "title" : "NoFinalizer"
}, {
  "patternId" : "NoLineWrap",
  "title" : "NoLineWrap",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "NoWhitespaceAfter",
  "title" : "NoWhitespaceAfter",
  "parameters" : [ {
    "name" : "allowLineBreaks",
    "description" : "\n              Control whether whitespace is allowed if the token is at a linebreak.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "NoWhitespaceBefore",
  "title" : "NoWhitespaceBefore",
  "parameters" : [ {
    "name" : "allowLineBreaks",
    "description" : "\n              Control whether whitespace is allowed if the token is at a linebreak.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "NonEmptyAtclauseDescription",
  "title" : "NonEmptyAtclauseDescription",
  "parameters" : [ {
    "name" : "javadocTokens",
    "description" : "javadoc tokens to check"
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "OneStatementPerLine",
  "title" : "OneStatementPerLine",
  "parameters" : [ {
    "name" : "treatTryResourcesAsStatement",
    "description" : "Enable resources processing."
  } ]
}, {
  "patternId" : "OneTopLevelClass",
  "title" : "OneTopLevelClass"
}, {
  "patternId" : "OperatorWrap",
  "title" : "OperatorWrap",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to wrap lines."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "OrderedProperties",
  "title" : "OrderedProperties",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "Specify file type extension of the files to check."
  } ]
}, {
  "patternId" : "OuterTypeFilename",
  "title" : "OuterTypeFilename"
}, {
  "patternId" : "OuterTypeNumber",
  "title" : "OuterTypeNumber",
  "parameters" : [ {
    "name" : "max",
    "description" : "Specify the maximum number of outer types allowed."
  } ]
}, {
  "patternId" : "OverloadMethodsDeclarationOrder",
  "title" : "OverloadMethodsDeclarationOrder"
}, {
  "patternId" : "PackageAnnotation",
  "title" : "PackageAnnotation"
}, {
  "patternId" : "PackageDeclaration",
  "title" : "PackageDeclaration",
  "parameters" : [ {
    "name" : "matchDirectoryStructure",
    "description" : "Control whether to check for directory and package name match."
  } ]
}, {
  "patternId" : "PackageName",
  "title" : "PackageName",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "ParameterAssignment",
  "title" : "ParameterAssignment"
}, {
  "patternId" : "ParameterName",
  "title" : "ParameterName",
  "parameters" : [ {
    "name" : "accessModifiers",
    "description" : "Access modifiers of methods where parameters are checked."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  }, {
    "name" : "ignoreOverridden",
    "description" : "ignoreOverridden"
  } ]
}, {
  "patternId" : "ParameterNumber",
  "title" : "ParameterNumber",
  "parameters" : [ {
    "name" : "ignoreOverriddenMethods",
    "description" : "\n              Ignore number of parameters for methods with @Override annotation.\n            "
  }, {
    "name" : "max",
    "description" : "Specify the maximum number of parameters allowed."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "ParenPad",
  "title" : "ParenPad",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to pad parentheses."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "RedundantImport",
  "title" : "RedundantImport"
}, {
  "patternId" : "RedundantModifier",
  "title" : "RedundantModifier",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "Regexp",
  "title" : "Regexp",
  "parameters" : [ {
    "name" : "duplicateLimit",
    "description" : "duplicateLimit"
  }, {
    "name" : "errorLimit",
    "description" : "Controls the maximum number of violations before the check will abort."
  }, {
    "name" : "format",
    "description" : "pattern"
  }, {
    "name" : "ignoreComments",
    "description" : "Controls whether to ignore matches found within comments."
  }, {
    "name" : "illegalPattern",
    "description" : "Controls whether the pattern is required or illegal."
  }, {
    "name" : "message",
    "description" : "message which is used to notify about violations,\n              if empty then the default (hard-coded) message is used."
  } ]
}, {
  "patternId" : "RegexpHeader",
  "title" : "RegexpHeader",
  "parameters" : [ {
    "name" : "charset",
    "description" : "character encoding to use when reading the headerFile"
  }, {
    "name" : "fileExtensions",
    "description" : "file type extension of files to process"
  }, {
    "name" : "header",
    "description" : "header"
  }, {
    "name" : "headerFile",
    "description" : "name of the file containing the required header"
  }, {
    "name" : "multiLines",
    "description" : "line numbers to repeat (zero or more times)"
  } ]
}, {
  "patternId" : "RegexpMultiline",
  "title" : "RegexpMultiline",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "file type extension of files to process"
  }, {
    "name" : "format",
    "description" : "illegal pattern"
  }, {
    "name" : "ignoreCase",
    "description" : "Controls whether to ignore case when searching."
  }, {
    "name" : "matchAcrossLines",
    "description" : "Controls whether to match expressions across multiple lines."
  }, {
    "name" : "maximum",
    "description" : "The maximum number of matches required in each file."
  }, {
    "name" : "message",
    "description" : "message which is used to notify about violations,\n            if empty then default(hard-coded) message is used."
  }, {
    "name" : "minimum",
    "description" : "The minimum number of matches required in each file."
  } ]
}, {
  "patternId" : "RegexpOnFilename",
  "title" : "RegexpOnFilename",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "File type extension of files to process. If this is specified, then\n            only files that match these types are examined with the other patterns."
  }, {
    "name" : "fileNamePattern",
    "description" : "Regular expression to match the file name against."
  }, {
    "name" : "folderPattern",
    "description" : "Regular expression to match the folder path against."
  }, {
    "name" : "ignoreFileNameExtensions",
    "description" : "Whether to ignore the file extension for the file name match."
  }, {
    "name" : "match",
    "description" : "Whether to look for a match or mis-match on the file name, if the\n            fileNamePattern is supplied, otherwise it is applied on the folderPattern."
  } ]
}, {
  "patternId" : "RegexpSingleline",
  "title" : "RegexpSingleline",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "file type extension of files to process"
  }, {
    "name" : "format",
    "description" : "illegal pattern"
  }, {
    "name" : "ignoreCase",
    "description" : "Controls whether to ignore case when searching."
  }, {
    "name" : "maximum",
    "description" : "The maximum number of matches required in each file."
  }, {
    "name" : "message",
    "description" : "message which is used to notify about violations,\n            if empty then default(hard-coded) message is used."
  }, {
    "name" : "minimum",
    "description" : "The minimum number of matches required in each file."
  } ]
}, {
  "patternId" : "RegexpSinglelineJava",
  "title" : "RegexpSinglelineJava",
  "parameters" : [ {
    "name" : "format",
    "description" : "illegal pattern"
  }, {
    "name" : "ignoreCase",
    "description" : "Controls whether to ignore case when searching."
  }, {
    "name" : "ignoreComments",
    "description" : "Controls whether to ignore text in comments when searching."
  }, {
    "name" : "maximum",
    "description" : "The maximum number of matches required in each file."
  }, {
    "name" : "message",
    "description" : "message which is used to notify about violations,\n            if empty then default(hard-coded) message is used."
  }, {
    "name" : "minimum",
    "description" : "The minimum number of matches required in each file."
  } ]
}, {
  "patternId" : "RequireThis",
  "title" : "RequireThis",
  "parameters" : [ {
    "name" : "checkFields",
    "description" : "Control whether to check references to fields."
  }, {
    "name" : "checkMethods",
    "description" : "Control whether to check references to methods."
  }, {
    "name" : "validateOnlyOverlapping",
    "description" : "Control whether to check only overlapping by variables or arguments."
  } ]
}, {
  "patternId" : "ReturnCount",
  "title" : "ReturnCount",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specify method names to ignore."
  }, {
    "name" : "max",
    "description" : "\n              Specify maximum allowed number of return statements in non-void methods/lambdas.\n            "
  }, {
    "name" : "maxForVoid",
    "description" : "Specify maximum allowed number of return statements in void\n                methods/constructors/lambdas."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "RightCurly",
  "title" : "RightCurly",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify the policy on placement of a right curly brace ('}')."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "SeparatorWrap",
  "title" : "SeparatorWrap",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to wrap lines."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "SimplifyBooleanExpression",
  "title" : "SimplifyBooleanExpression"
}, {
  "patternId" : "SimplifyBooleanReturn",
  "title" : "SimplifyBooleanReturn"
}, {
  "patternId" : "SingleLineJavadoc",
  "title" : "SingleLineJavadoc",
  "parameters" : [ {
    "name" : "ignoreInlineTags",
    "description" : "whether inline tags must be ignored."
  }, {
    "name" : "ignoredTags",
    "description" : "allows to specify at-clauses which are ignored by the check."
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "SingleSpaceSeparator",
  "title" : "SingleSpaceSeparator",
  "parameters" : [ {
    "name" : "validateComments",
    "description" : "Control whether to validate whitespaces surrounding comments."
  } ]
}, {
  "patternId" : "StaticVariableName",
  "title" : "StaticVariableName",
  "parameters" : [ {
    "name" : "applyToPackage",
    "description" : "\n              Controls whether to apply the check to package-private member.\n            "
  }, {
    "name" : "applyToPrivate",
    "description" : "Controls whether to apply the check to private member."
  }, {
    "name" : "applyToProtected",
    "description" : "Controls whether to apply the check to protected member."
  }, {
    "name" : "applyToPublic",
    "description" : "Controls whether to apply the check to public member."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  } ]
}, {
  "patternId" : "StringLiteralEquality",
  "title" : "StringLiteralEquality"
}, {
  "patternId" : "SummaryJavadoc",
  "title" : "SummaryJavadoc",
  "parameters" : [ {
    "name" : "forbiddenSummaryFragments",
    "description" : "forbidden summary fragments"
  }, {
    "name" : "period",
    "description" : "period symbol at the end of first javadoc sentence"
  }, {
    "name" : "violateExecutionOnNonTightHtml",
    "description" : "\n              If turned on, will print violations if the Javadoc being examined by this check\n              violates the tight html rules defined at\n              Tight-HTML Rules."
  } ]
}, {
  "patternId" : "SuperClone",
  "title" : "SuperClone"
}, {
  "patternId" : "SuperFinalize",
  "title" : "SuperFinalize"
}, {
  "patternId" : "SuppressWarnings",
  "title" : "SuppressWarnings",
  "parameters" : [ {
    "name" : "format",
    "description" : "\n               Specify the RegExp to match against warnings. Any warning\n               being suppressed matching this pattern will be flagged.\n            "
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "SuppressWarningsHolder",
  "title" : "SuppressWarningsHolder",
  "parameters" : [ {
    "name" : "aliasList",
    "description" : "Specify aliases for check names that can be used in code within\n                SuppressWarnings."
  } ]
}, {
  "patternId" : "ThrowsCount",
  "title" : "ThrowsCount",
  "parameters" : [ {
    "name" : "ignorePrivateMethods",
    "description" : "Allow private methods to be ignored."
  }, {
    "name" : "max",
    "description" : "Specify maximum allowed number of throws statements."
  } ]
}, {
  "patternId" : "TodoComment",
  "title" : "TodoComment",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specify pattern to match comments against."
  } ]
}, {
  "patternId" : "TrailingComment",
  "title" : "TrailingComment",
  "parameters" : [ {
    "name" : "format",
    "description" : "Specify pattern for strings allowed before the comment."
  }, {
    "name" : "legalComment",
    "description" : "Define pattern for text allowed in trailing comments. (This\n                pattern will not be applied to multiline comments and the text of the\n                comment will be trimmed before matching.)"
  } ]
}, {
  "patternId" : "Translation",
  "title" : "Translation",
  "parameters" : [ {
    "name" : "baseName",
    "description" : "Specify\n              \n              Base name of resource bundles which contain message resources. It helps\n              the check to distinguish config and localization resources."
  }, {
    "name" : "fileExtensions",
    "description" : "fileExtensions"
  }, {
    "name" : "requiredTranslations",
    "description" : "\n              Specify language codes of required translations which must exist in project.\n            "
  } ]
}, {
  "patternId" : "TypeName",
  "title" : "TypeName",
  "parameters" : [ {
    "name" : "applyToPackage",
    "description" : "\n              Controls whether to apply the check to package-private member.\n            "
  }, {
    "name" : "applyToPrivate",
    "description" : "Controls whether to apply the check to private member."
  }, {
    "name" : "applyToProtected",
    "description" : "Controls whether to apply the check to protected member."
  }, {
    "name" : "applyToPublic",
    "description" : "Controls whether to apply the check to public member."
  }, {
    "name" : "format",
    "description" : "Specifies valid identifiers."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "TypecastParenPad",
  "title" : "TypecastParenPad",
  "parameters" : [ {
    "name" : "option",
    "description" : "Specify policy on how to pad parentheses."
  } ]
}, {
  "patternId" : "UncommentedMain",
  "title" : "UncommentedMain",
  "parameters" : [ {
    "name" : "excludedClasses",
    "description" : "Specify pattern for qualified names of classes which are allowed\n            to have a main method."
  } ]
}, {
  "patternId" : "UniqueProperties",
  "title" : "UniqueProperties",
  "parameters" : [ {
    "name" : "fileExtensions",
    "description" : "Specify file type extension of the files to check."
  } ]
}, {
  "patternId" : "UnnecessaryParentheses",
  "title" : "UnnecessaryParentheses",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "UnnecessarySemicolonAfterTypeMemberDeclaration",
  "title" : "UnnecessarySemicolonAfterTypeMemberDeclaration",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "UnnecessarySemicolonInEnumeration",
  "title" : "UnnecessarySemicolonInEnumeration"
}, {
  "patternId" : "UnnecessarySemicolonInTryWithResources",
  "title" : "UnnecessarySemicolonInTryWithResources",
  "parameters" : [ {
    "name" : "allowWhenNoBraceAfterSemicolon",
    "description" : "Allow unnecessary semicolon if closing paren is not on the same line."
  } ]
}, {
  "patternId" : "UnusedImports",
  "title" : "UnusedImports",
  "parameters" : [ {
    "name" : "processJavadoc",
    "description" : "whether to process Javadoc"
  } ]
}, {
  "patternId" : "UpperEll",
  "title" : "UpperEll"
}, {
  "patternId" : "VariableDeclarationUsageDistance",
  "title" : "VariableDeclarationUsageDistance",
  "parameters" : [ {
    "name" : "allowedDistance",
    "description" : "Specify distance between declaration of variable and its first usage.\n                Values should be greater than 0."
  }, {
    "name" : "ignoreFinal",
    "description" : "Allow to ignore variables with a 'final' modifier."
  }, {
    "name" : "ignoreVariablePattern",
    "description" : "\n              Define RegExp to ignore distance calculation for variables listed in this pattern.\n            "
  }, {
    "name" : "validateBetweenScopes",
    "description" : "Allow to calculate the distance between declaration of variable and its\n                first usage in the different scopes."
  } ]
}, {
  "patternId" : "VisibilityModifier",
  "title" : "VisibilityModifier",
  "parameters" : [ {
    "name" : "allowPublicFinalFields",
    "description" : "Allow final fields to be declared as public."
  }, {
    "name" : "allowPublicImmutableFields",
    "description" : "Allow immutable fields to be declared as public if defined in final class."
  }, {
    "name" : "ignoreAnnotationCanonicalNames",
    "description" : "\n              Specify the list of annotations canonical names which ignore variables in\n              consideration.\n            "
  }, {
    "name" : "immutableClassCanonicalNames",
    "description" : "Specify immutable classes canonical names."
  }, {
    "name" : "packageAllowed",
    "description" : "Control whether package visible members are allowed."
  }, {
    "name" : "protectedAllowed",
    "description" : "Control whether protected members are allowed."
  }, {
    "name" : "publicMemberPattern",
    "description" : "Specify pattern for public members that should be ignored."
  } ]
}, {
  "patternId" : "WhitespaceAfter",
  "title" : "WhitespaceAfter",
  "parameters" : [ {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "WhitespaceAround",
  "title" : "WhitespaceAround",
  "parameters" : [ {
    "name" : "allowEmptyCatches",
    "description" : "Allow empty catch bodies."
  }, {
    "name" : "allowEmptyConstructors",
    "description" : "Allow empty constructor bodies."
  }, {
    "name" : "allowEmptyLambdas",
    "description" : "Allow empty lambda bodies."
  }, {
    "name" : "allowEmptyLoops",
    "description" : "Allow empty loop bodies."
  }, {
    "name" : "allowEmptyMethods",
    "description" : "Allow empty method bodies."
  }, {
    "name" : "allowEmptyTypes",
    "description" : "Allow empty class, interface and enum bodies."
  }, {
    "name" : "ignoreEnhancedForColon",
    "description" : "Ignore whitespace around colon in\n              \n                enhanced for loop."
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
}, {
  "patternId" : "WriteTag",
  "title" : "WriteTag",
  "parameters" : [ {
    "name" : "tag",
    "description" : "Name of tag"
  }, {
    "name" : "tagFormat",
    "description" : "Format of tag"
  }, {
    "name" : "tagSeverity",
    "description" : "Severity level when tag is found and printed"
  }, {
    "name" : "tokens",
    "description" : "tokens to check"
  } ]
} ]